// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-common/common/policies"
	"github.com/hyperledger/fabric-x-orderer/common/requestfilter"
)

type FakeFilterConfig struct {
	GetChannelIDStub        func() string
	getChannelIDMutex       sync.RWMutex
	getChannelIDArgsForCall []struct {
	}
	getChannelIDReturns struct {
		result1 string
	}
	getChannelIDReturnsOnCall map[int]struct {
		result1 string
	}
	GetClientSignatureVerificationRequiredStub        func() bool
	getClientSignatureVerificationRequiredMutex       sync.RWMutex
	getClientSignatureVerificationRequiredArgsForCall []struct {
	}
	getClientSignatureVerificationRequiredReturns struct {
		result1 bool
	}
	getClientSignatureVerificationRequiredReturnsOnCall map[int]struct {
		result1 bool
	}
	GetPolicyManagerStub        func() policies.Manager
	getPolicyManagerMutex       sync.RWMutex
	getPolicyManagerArgsForCall []struct {
	}
	getPolicyManagerReturns struct {
		result1 policies.Manager
	}
	getPolicyManagerReturnsOnCall map[int]struct {
		result1 policies.Manager
	}
	GetRequestMaxBytesStub        func() uint64
	getRequestMaxBytesMutex       sync.RWMutex
	getRequestMaxBytesArgsForCall []struct {
	}
	getRequestMaxBytesReturns struct {
		result1 uint64
	}
	getRequestMaxBytesReturnsOnCall map[int]struct {
		result1 uint64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFilterConfig) GetChannelID() string {
	fake.getChannelIDMutex.Lock()
	ret, specificReturn := fake.getChannelIDReturnsOnCall[len(fake.getChannelIDArgsForCall)]
	fake.getChannelIDArgsForCall = append(fake.getChannelIDArgsForCall, struct {
	}{})
	fake.recordInvocation("GetChannelID", []interface{}{})
	fake.getChannelIDMutex.Unlock()
	if fake.GetChannelIDStub != nil {
		return fake.GetChannelIDStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getChannelIDReturns
	return fakeReturns.result1
}

func (fake *FakeFilterConfig) GetChannelIDCallCount() int {
	fake.getChannelIDMutex.RLock()
	defer fake.getChannelIDMutex.RUnlock()
	return len(fake.getChannelIDArgsForCall)
}

func (fake *FakeFilterConfig) GetChannelIDCalls(stub func() string) {
	fake.getChannelIDMutex.Lock()
	defer fake.getChannelIDMutex.Unlock()
	fake.GetChannelIDStub = stub
}

func (fake *FakeFilterConfig) GetChannelIDReturns(result1 string) {
	fake.getChannelIDMutex.Lock()
	defer fake.getChannelIDMutex.Unlock()
	fake.GetChannelIDStub = nil
	fake.getChannelIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeFilterConfig) GetChannelIDReturnsOnCall(i int, result1 string) {
	fake.getChannelIDMutex.Lock()
	defer fake.getChannelIDMutex.Unlock()
	fake.GetChannelIDStub = nil
	if fake.getChannelIDReturnsOnCall == nil {
		fake.getChannelIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getChannelIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeFilterConfig) GetClientSignatureVerificationRequired() bool {
	fake.getClientSignatureVerificationRequiredMutex.Lock()
	ret, specificReturn := fake.getClientSignatureVerificationRequiredReturnsOnCall[len(fake.getClientSignatureVerificationRequiredArgsForCall)]
	fake.getClientSignatureVerificationRequiredArgsForCall = append(fake.getClientSignatureVerificationRequiredArgsForCall, struct {
	}{})
	fake.recordInvocation("GetClientSignatureVerificationRequired", []interface{}{})
	fake.getClientSignatureVerificationRequiredMutex.Unlock()
	if fake.GetClientSignatureVerificationRequiredStub != nil {
		return fake.GetClientSignatureVerificationRequiredStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getClientSignatureVerificationRequiredReturns
	return fakeReturns.result1
}

func (fake *FakeFilterConfig) GetClientSignatureVerificationRequiredCallCount() int {
	fake.getClientSignatureVerificationRequiredMutex.RLock()
	defer fake.getClientSignatureVerificationRequiredMutex.RUnlock()
	return len(fake.getClientSignatureVerificationRequiredArgsForCall)
}

func (fake *FakeFilterConfig) GetClientSignatureVerificationRequiredCalls(stub func() bool) {
	fake.getClientSignatureVerificationRequiredMutex.Lock()
	defer fake.getClientSignatureVerificationRequiredMutex.Unlock()
	fake.GetClientSignatureVerificationRequiredStub = stub
}

func (fake *FakeFilterConfig) GetClientSignatureVerificationRequiredReturns(result1 bool) {
	fake.getClientSignatureVerificationRequiredMutex.Lock()
	defer fake.getClientSignatureVerificationRequiredMutex.Unlock()
	fake.GetClientSignatureVerificationRequiredStub = nil
	fake.getClientSignatureVerificationRequiredReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFilterConfig) GetClientSignatureVerificationRequiredReturnsOnCall(i int, result1 bool) {
	fake.getClientSignatureVerificationRequiredMutex.Lock()
	defer fake.getClientSignatureVerificationRequiredMutex.Unlock()
	fake.GetClientSignatureVerificationRequiredStub = nil
	if fake.getClientSignatureVerificationRequiredReturnsOnCall == nil {
		fake.getClientSignatureVerificationRequiredReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.getClientSignatureVerificationRequiredReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFilterConfig) GetPolicyManager() policies.Manager {
	fake.getPolicyManagerMutex.Lock()
	ret, specificReturn := fake.getPolicyManagerReturnsOnCall[len(fake.getPolicyManagerArgsForCall)]
	fake.getPolicyManagerArgsForCall = append(fake.getPolicyManagerArgsForCall, struct {
	}{})
	fake.recordInvocation("GetPolicyManager", []interface{}{})
	fake.getPolicyManagerMutex.Unlock()
	if fake.GetPolicyManagerStub != nil {
		return fake.GetPolicyManagerStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getPolicyManagerReturns
	return fakeReturns.result1
}

func (fake *FakeFilterConfig) GetPolicyManagerCallCount() int {
	fake.getPolicyManagerMutex.RLock()
	defer fake.getPolicyManagerMutex.RUnlock()
	return len(fake.getPolicyManagerArgsForCall)
}

func (fake *FakeFilterConfig) GetPolicyManagerCalls(stub func() policies.Manager) {
	fake.getPolicyManagerMutex.Lock()
	defer fake.getPolicyManagerMutex.Unlock()
	fake.GetPolicyManagerStub = stub
}

func (fake *FakeFilterConfig) GetPolicyManagerReturns(result1 policies.Manager) {
	fake.getPolicyManagerMutex.Lock()
	defer fake.getPolicyManagerMutex.Unlock()
	fake.GetPolicyManagerStub = nil
	fake.getPolicyManagerReturns = struct {
		result1 policies.Manager
	}{result1}
}

func (fake *FakeFilterConfig) GetPolicyManagerReturnsOnCall(i int, result1 policies.Manager) {
	fake.getPolicyManagerMutex.Lock()
	defer fake.getPolicyManagerMutex.Unlock()
	fake.GetPolicyManagerStub = nil
	if fake.getPolicyManagerReturnsOnCall == nil {
		fake.getPolicyManagerReturnsOnCall = make(map[int]struct {
			result1 policies.Manager
		})
	}
	fake.getPolicyManagerReturnsOnCall[i] = struct {
		result1 policies.Manager
	}{result1}
}

func (fake *FakeFilterConfig) GetRequestMaxBytes() uint64 {
	fake.getRequestMaxBytesMutex.Lock()
	ret, specificReturn := fake.getRequestMaxBytesReturnsOnCall[len(fake.getRequestMaxBytesArgsForCall)]
	fake.getRequestMaxBytesArgsForCall = append(fake.getRequestMaxBytesArgsForCall, struct {
	}{})
	fake.recordInvocation("GetRequestMaxBytes", []interface{}{})
	fake.getRequestMaxBytesMutex.Unlock()
	if fake.GetRequestMaxBytesStub != nil {
		return fake.GetRequestMaxBytesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getRequestMaxBytesReturns
	return fakeReturns.result1
}

func (fake *FakeFilterConfig) GetRequestMaxBytesCallCount() int {
	fake.getRequestMaxBytesMutex.RLock()
	defer fake.getRequestMaxBytesMutex.RUnlock()
	return len(fake.getRequestMaxBytesArgsForCall)
}

func (fake *FakeFilterConfig) GetRequestMaxBytesCalls(stub func() uint64) {
	fake.getRequestMaxBytesMutex.Lock()
	defer fake.getRequestMaxBytesMutex.Unlock()
	fake.GetRequestMaxBytesStub = stub
}

func (fake *FakeFilterConfig) GetRequestMaxBytesReturns(result1 uint64) {
	fake.getRequestMaxBytesMutex.Lock()
	defer fake.getRequestMaxBytesMutex.Unlock()
	fake.GetRequestMaxBytesStub = nil
	fake.getRequestMaxBytesReturns = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeFilterConfig) GetRequestMaxBytesReturnsOnCall(i int, result1 uint64) {
	fake.getRequestMaxBytesMutex.Lock()
	defer fake.getRequestMaxBytesMutex.Unlock()
	fake.GetRequestMaxBytesStub = nil
	if fake.getRequestMaxBytesReturnsOnCall == nil {
		fake.getRequestMaxBytesReturnsOnCall = make(map[int]struct {
			result1 uint64
		})
	}
	fake.getRequestMaxBytesReturnsOnCall[i] = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeFilterConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getChannelIDMutex.RLock()
	defer fake.getChannelIDMutex.RUnlock()
	fake.getClientSignatureVerificationRequiredMutex.RLock()
	defer fake.getClientSignatureVerificationRequiredMutex.RUnlock()
	fake.getPolicyManagerMutex.RLock()
	defer fake.getPolicyManagerMutex.RUnlock()
	fake.getRequestMaxBytesMutex.RLock()
	defer fake.getRequestMaxBytesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFilterConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ requestfilter.FilterConfig = new(FakeFilterConfig)
