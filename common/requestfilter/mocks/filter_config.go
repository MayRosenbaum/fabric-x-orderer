// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-x-orderer/common/requestfilter"
)

type FakeFilterConfig struct {
	ChannelIDStub        func() string
	channelIDMutex       sync.RWMutex
	channelIDArgsForCall []struct {
	}
	channelIDReturns struct {
		result1 string
	}
	channelIDReturnsOnCall map[int]struct {
		result1 string
	}
	ClientSignatureVerificationRequiredStub        func() bool
	clientSignatureVerificationRequiredMutex       sync.RWMutex
	clientSignatureVerificationRequiredArgsForCall []struct {
	}
	clientSignatureVerificationRequiredReturns struct {
		result1 bool
	}
	clientSignatureVerificationRequiredReturnsOnCall map[int]struct {
		result1 bool
	}
	RequestMaxBytesStub        func() uint64
	requestMaxBytesMutex       sync.RWMutex
	requestMaxBytesArgsForCall []struct {
	}
	requestMaxBytesReturns struct {
		result1 uint64
	}
	requestMaxBytesReturnsOnCall map[int]struct {
		result1 uint64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFilterConfig) ChannelID() string {
	fake.channelIDMutex.Lock()
	ret, specificReturn := fake.channelIDReturnsOnCall[len(fake.channelIDArgsForCall)]
	fake.channelIDArgsForCall = append(fake.channelIDArgsForCall, struct {
	}{})
	stub := fake.ChannelIDStub
	fakeReturns := fake.channelIDReturns
	fake.recordInvocation("ChannelID", []interface{}{})
	fake.channelIDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFilterConfig) ChannelIDCallCount() int {
	fake.channelIDMutex.RLock()
	defer fake.channelIDMutex.RUnlock()
	return len(fake.channelIDArgsForCall)
}

func (fake *FakeFilterConfig) ChannelIDCalls(stub func() string) {
	fake.channelIDMutex.Lock()
	defer fake.channelIDMutex.Unlock()
	fake.ChannelIDStub = stub
}

func (fake *FakeFilterConfig) ChannelIDReturns(result1 string) {
	fake.channelIDMutex.Lock()
	defer fake.channelIDMutex.Unlock()
	fake.ChannelIDStub = nil
	fake.channelIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeFilterConfig) ChannelIDReturnsOnCall(i int, result1 string) {
	fake.channelIDMutex.Lock()
	defer fake.channelIDMutex.Unlock()
	fake.ChannelIDStub = nil
	if fake.channelIDReturnsOnCall == nil {
		fake.channelIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.channelIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeFilterConfig) ClientSignatureVerificationRequired() bool {
	fake.clientSignatureVerificationRequiredMutex.Lock()
	ret, specificReturn := fake.clientSignatureVerificationRequiredReturnsOnCall[len(fake.clientSignatureVerificationRequiredArgsForCall)]
	fake.clientSignatureVerificationRequiredArgsForCall = append(fake.clientSignatureVerificationRequiredArgsForCall, struct {
	}{})
	stub := fake.ClientSignatureVerificationRequiredStub
	fakeReturns := fake.clientSignatureVerificationRequiredReturns
	fake.recordInvocation("ClientSignatureVerificationRequired", []interface{}{})
	fake.clientSignatureVerificationRequiredMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFilterConfig) ClientSignatureVerificationRequiredCallCount() int {
	fake.clientSignatureVerificationRequiredMutex.RLock()
	defer fake.clientSignatureVerificationRequiredMutex.RUnlock()
	return len(fake.clientSignatureVerificationRequiredArgsForCall)
}

func (fake *FakeFilterConfig) ClientSignatureVerificationRequiredCalls(stub func() bool) {
	fake.clientSignatureVerificationRequiredMutex.Lock()
	defer fake.clientSignatureVerificationRequiredMutex.Unlock()
	fake.ClientSignatureVerificationRequiredStub = stub
}

func (fake *FakeFilterConfig) ClientSignatureVerificationRequiredReturns(result1 bool) {
	fake.clientSignatureVerificationRequiredMutex.Lock()
	defer fake.clientSignatureVerificationRequiredMutex.Unlock()
	fake.ClientSignatureVerificationRequiredStub = nil
	fake.clientSignatureVerificationRequiredReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFilterConfig) ClientSignatureVerificationRequiredReturnsOnCall(i int, result1 bool) {
	fake.clientSignatureVerificationRequiredMutex.Lock()
	defer fake.clientSignatureVerificationRequiredMutex.Unlock()
	fake.ClientSignatureVerificationRequiredStub = nil
	if fake.clientSignatureVerificationRequiredReturnsOnCall == nil {
		fake.clientSignatureVerificationRequiredReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.clientSignatureVerificationRequiredReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFilterConfig) RequestMaxBytes() uint64 {
	fake.requestMaxBytesMutex.Lock()
	ret, specificReturn := fake.requestMaxBytesReturnsOnCall[len(fake.requestMaxBytesArgsForCall)]
	fake.requestMaxBytesArgsForCall = append(fake.requestMaxBytesArgsForCall, struct {
	}{})
	stub := fake.RequestMaxBytesStub
	fakeReturns := fake.requestMaxBytesReturns
	fake.recordInvocation("RequestMaxBytes", []interface{}{})
	fake.requestMaxBytesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFilterConfig) RequestMaxBytesCallCount() int {
	fake.requestMaxBytesMutex.RLock()
	defer fake.requestMaxBytesMutex.RUnlock()
	return len(fake.requestMaxBytesArgsForCall)
}

func (fake *FakeFilterConfig) RequestMaxBytesCalls(stub func() uint64) {
	fake.requestMaxBytesMutex.Lock()
	defer fake.requestMaxBytesMutex.Unlock()
	fake.RequestMaxBytesStub = stub
}

func (fake *FakeFilterConfig) RequestMaxBytesReturns(result1 uint64) {
	fake.requestMaxBytesMutex.Lock()
	defer fake.requestMaxBytesMutex.Unlock()
	fake.RequestMaxBytesStub = nil
	fake.requestMaxBytesReturns = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeFilterConfig) RequestMaxBytesReturnsOnCall(i int, result1 uint64) {
	fake.requestMaxBytesMutex.Lock()
	defer fake.requestMaxBytesMutex.Unlock()
	fake.RequestMaxBytesStub = nil
	if fake.requestMaxBytesReturnsOnCall == nil {
		fake.requestMaxBytesReturnsOnCall = make(map[int]struct {
			result1 uint64
		})
	}
	fake.requestMaxBytesReturnsOnCall[i] = struct {
		result1 uint64
	}{result1}
}

func (fake *FakeFilterConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFilterConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ requestfilter.FilterConfig = new(FakeFilterConfig)
